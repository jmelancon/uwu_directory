parameters:
    ldap.dn.base: "%env(LDAP_DN_BASE)%"
    ldap.dn.user: "%env(LDAP_DN_USER_RELATIVE)%,%ldap.dn.base%"
    ldap.dn.group: "%env(LDAP_DN_GROUP_RELATIVE)%,%ldap.dn.base%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\Tokenizer:
        arguments:
            $secret: '%env(APP_SECRET)%'

    Symfony\Component\Ldap\Ldap:
        arguments: ['@Symfony\Component\Ldap\Adapter\ExtLdap\Adapter']
        tags:
            - ldap

    Symfony\Component\Ldap\Adapter\ExtLdap\Adapter:
        arguments:
            -   connection_string: '%env(LDAP_URI)%'
                options:
                    protocol_version: 3
                    referrals: false
                    x_tls_require_cert: false

    App\Service\ValueResolver\LdapGroupListResolver:
        arguments:
            $baseDn: '%ldap.dn.group%'

    App\Service\Ldap\LdapUserCreator:
        arguments:
            $userDn: '%ldap.dn.user%'
            $baseDn: '%ldap.dn.base%'
            $accountSuffix: "%env(USERNAME_SUFFIX)%"
            $principalSuffix: '%env(PRINCIPAL_SUFFIX)%'
            $emailSuffix: '%env(EMAIL_SUFFIX)%'
            $groupDn: '%ldap.dn.group%'

    App\Service\Ldap\LdapResetPassword:
        arguments:
            $userDn: '%ldap.dn.user%'
            $usernameSuffix: '%env(USERNAME_SUFFIX)%'

    App\Service\Ldap\LdapAggregator:
        arguments:
            $uri: "%env(LDAP_URI)%"
            $username: "%env(LDAP_USERNAME)%"
            $password: "%env(LDAP_PASSWORD)%"

    App\Service\Condition\UserExistsCondition:
        arguments:
            $userDn: '%ldap.dn.user%'
            $emailSuffix: '%env(EMAIL_SUFFIX)%'

    App\Service\Ldap\LdapGetUserGroups:
        arguments:
            $userDn: '%ldap.dn.user%'
            $emailSuffix: '%env(EMAIL_SUFFIX)%'

    App\Service\Ldap\LdapGroupModifier:
        arguments:
            $userDn: '%ldap.dn.user%'
            $usernameSuffix: '%env(USERNAME_SUFFIX)%'

    App\Service\Mailer:
        arguments:
            $administratorAddress: "%env(ADMIN_EMAIL)%"
            $emailSuffix: "%env(EMAIL_SUFFIX)%"
            $senderAddress: "%env(SENDER_EMAIL)%"

    App\Service\Ldap\LdapCheckPassword:
        arguments:
           $usernameSuffix: '%env(USERNAME_SUFFIX)%'
           $connectionString: '%env(LDAP_URI)%'
           $userDn: '%ldap.dn.user%'

    App\Security\LdapUserProvider:
        arguments:
            $userDn: '%ldap.dn.user%'
